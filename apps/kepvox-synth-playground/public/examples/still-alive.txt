import { OscillatorSynthNode, ADSREnvelopeSynthNode, SynthTime as T, Pitch, PitchNotation } from 'synth'
import { context } from 'synth/playground'

context.timeSignature = [4, 4]

const oscillator = new OscillatorSynthNode(context)
const envelope = new ADSREnvelopeSynthNode(context)

oscillator.connectOutput(envelope)
envelope.connectOutput(context.output)

oscillator.waveShape.value = 'triangle'
envelope.attack.initialValue = new T({note16: 1}).toNotes()
envelope.release.initialValue = new T({note16: 1}).toNotes()

const play = (time: T, note: PitchNotation, duration: T) => {
    oscillator.frequency.curve.setValueAt(time, Pitch.frequency(note))
    envelope.attackAt(time)
    envelope.releaseAt(time.add(duration).add({ note: -envelope.release.initialValue }))
}

const n4 = new T({ note4: 1 })
const n8 = new T({ note8: 1 })

// "Still alive" Â© Valve
const notes: [PitchNotation | null, T][] = [
    ['C4',  n4],
    ['F4',  n4],
    ['E4',  n8],
    ['D4',  n8],
    ['D4',  n8],
    ['C4',  n8],
    ['D4',  n8],
    ['C4',  n8],
    ['C4',  n4],
    ['C4',  n8],
    [null,  n8],
    ['A3',  n8],
    ['A#3', n8],
    ['C4',  n4],
    ['F4',  n4],
    ['G4',  n8],
    ['F4',  n8],
    ['E4',  n8],
    ['D4',  n8],
    ['D4',  n8],
    ['E4',  n8],
    ['F4',  n4],
    ['F4',  n8],
    [null,  n8],
    ['G4',  n8],
    ['A4',  n8],
    ['A#4', n8],
    ['A#4', n8],
    ['A4',  n4],
    ['G4',  n4],
    ['F4',  n8],
    ['G4',  n8],
    ['A4',  n8],
    ['A4',  n8],
    ['G4',  n4],
    ['F4',  n4],
    ['D4',  n8],
    ['C4',  n8],
    ['D4',  n8],
    ['F4',  n8],
    ['F4',  n8],
    ['E4',  n4],
    ['E4',  n8],
    ['F#4', n8],
    ['F#4', n4],
]

let time = T.start
for (const [note, duration] of notes) {
    if (note !== null) {
        play(time, note, duration)
    }
    time = time.add(duration)
}
