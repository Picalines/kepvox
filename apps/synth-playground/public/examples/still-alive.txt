import { GeneratorSynthNode, GainSynthNode, Time as T, Factor, Pitch as P } from 'synth'
import { synth } from 'synth/playground'

const generator = new GeneratorSynthNode(synth, { maxPolyphony: 16 })
const gain = new GainSynthNode(synth)

generator.connect(gain)
gain.connect(synth.output)

generator.waveShape.value = 'triangle'
generator.attack.initialValue = T.n16.notes
generator.release.initialValue = T.n8.notes

gain.factor.initialValue = Factor(0.5)

// "Still alive" Â© Valve
const notes = [
    [P.c4, T.n4],
    [P.f4, T.n4],
    [P.e4, T.n8],
    [P.d4, T.n8],
    [P.d4, T.n8],
    [P.c4, T.n8],
    [P.d4, T.n8],
    [P.c4, T.n8],
    [P.c4, T.n4],
    [P.c4, T.n8],
    ['no', T.n8],
    [P.a3, T.n8],
    [P.A3, T.n8],
    [P.c4, T.n4],
    [P.f4, T.n4],
    [P.g4, T.n8],
    [P.f4, T.n8],
    [P.e4, T.n8],
    [P.d4, T.n8],
    [P.d4, T.n8],
    [P.e4, T.n8],
    [P.f4, T.n4],
    [P.f4, T.n8],
    ['no', T.n8],
    [P.g4, T.n8],
    [P.a4, T.n8],
    [P.A4, T.n8],
    [P.A4, T.n8],
    [P.a4, T.n4],
    [P.g4, T.n4],
    [P.f4, T.n8],
    [P.g4, T.n8],
    [P.a4, T.n8],
    [P.a4, T.n8],
    [P.g4, T.n4],
    [P.f4, T.n4],
    [P.d4, T.n8],
    [P.c4, T.n8],
    [P.d4, T.n8],
    [P.f4, T.n8],
    [P.f4, T.n8],
    [P.e4, T.n4],
    [P.e4, T.n8],
    [P.F4, T.n8],
    [P.F4, T.n4],
] as const

let time = T.start
for (const [pitch, duration] of notes) {
    if (pitch !== 'no') {
        generator.attackAtFor(time, duration.notes, pitch.hertz)
    }
    time = time.add(duration)
}
